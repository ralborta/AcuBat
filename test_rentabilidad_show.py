#!/usr/bin/env python3
"""
üß™ TEST ESPEC√çFICO DEL AN√ÅLISIS DE RENTABILIDAD
Prueba las metodolog√≠as del sector bater√≠as
"""
import sys
import os
import json
from pprint import pprint

# Agregar path para importar m√≥dulos
sys.path.append('api')

def test_rentabilidad_sector():
    """Prueba el analizador de rentabilidad del sector bater√≠as"""
    
    print("üìä TEST DE AN√ÅLISIS DE RENTABILIDAD SECTOR BATER√çAS")
    print("=" * 55)
    
    try:
        from api.rentabilidad_sector_baterias import RentabilidadSectorBaterias
        
        # Crear analizador
        analizador = RentabilidadSectorBaterias()
        print("‚úÖ Analizador de rentabilidad inicializado")
        
        # Producto de prueba con pricing por canales
        producto_test = {
            "codigo": "M20GD-001",
            "nombre": "Moura 20 Gold 45Ah",
            "marca": "moura",
            "precio_base": 35000,
            "pricing_canales": {
                "mayorista": {
                    "precio_final": 41300,
                    "markup_aplicado": 18.0,
                    "margen": 15.4,
                    "rentabilidad": "√ìPTIMA"
                },
                "minorista": {
                    "precio_final": 64800,
                    "markup_aplicado": 85.1,
                    "margen": 46.0,
                    "rentabilidad": "√ìPTIMA"
                },
                "distribuidor": {
                    "precio_final": 40200,
                    "markup_aplicado": 14.9,
                    "margen": 12.9,
                    "rentabilidad": "ACEPTABLE"
                }
            }
        }
        
        print(f"\nüîç Analizando producto: {producto_test['codigo']}")
        print(f"   Marca: {producto_test['marca'].title()}")
        print(f"   Precio base: ${producto_test['precio_base']:,}")
        
        # Ejecutar an√°lisis
        resultado = analizador.analizar_rentabilidad_producto(producto_test)
        
        print(f"\nüìà RESULTADOS DEL AN√ÅLISIS:")
        print(f"   Metodolog√≠a: {resultado['metodologia']}")
        
        # Mostrar costos base
        costos = resultado['costos_base']
        print(f"\nüí∞ ESTRUCTURA DE COSTOS:")
        print(f"   Materia prima: ${costos['materia_prima']:,.0f}")
        print(f"   Mano obra: ${costos['mano_obra_directa']:,.0f}")
        print(f"   Costos industriales: ${costos['costos_industriales']:,.0f}")
        print(f"   TOTAL PRODUCCI√ìN: ${costos['costo_produccion']:,.0f}")
        
        # Mostrar an√°lisis por canal
        print(f"\nüìä AN√ÅLISIS POR CANAL:")
        for canal, analisis in resultado['analisis_por_canal'].items():
            print(f"\n   üîπ {canal.upper()}:")
            print(f"      Metodolog√≠a: {analisis['metodologia']}")
            print(f"      Precio venta: ${analisis['precio_venta']:,.0f}")
            
            if 'margen_neto_pct' in analisis:
                print(f"      Margen neto: {analisis['margen_neto_pct']:.1f}%")
                print(f"      ROI: {analisis['roi']:.1f}%")
            elif 'margen_contribucion_pct' in analisis:
                print(f"      Margen contribuci√≥n: {analisis['margen_contribucion_pct']:.1f}%")
            elif 'margen_zona_pct' in analisis:
                print(f"      Margen zona: {analisis['margen_zona_pct']:.1f}%")
                print(f"      Eficiencia territorial: {analisis['eficiencia_territorial']:.1f}%")
            
            evaluacion = analisis.get('evaluacion_rentabilidad', {})
            print(f"      Evaluaci√≥n: {evaluacion.get('evaluacion', 'N/A')}")
            print(f"      Recomendaci√≥n: {evaluacion.get('recomendacion', 'N/A')}")
        
        # Mostrar consolidado
        consolidado = resultado['rentabilidad_consolidada']
        print(f"\nüéØ AN√ÅLISIS CONSOLIDADO:")
        print(f"   Revenue potencial total: ${consolidado['total_revenue_potencial']:,.0f}")
        print(f"   Margen promedio canales: {consolidado['margen_promedio_canales']:.1f}%")
        print(f"   Canal m√°s rentable: {consolidado['canal_mas_rentable']['canal']} ({consolidado['canal_mas_rentable']['margen']:.1f}%)")
        print(f"   Evaluaci√≥n general: {consolidado['evaluacion_general']}")
        print(f"   Recomendaci√≥n estrat√©gica: {consolidado['recomendacion_estrategica']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de rentabilidad: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_show_completo_con_rentabilidad():
    """Prueba el show completo con an√°lisis de rentabilidad"""
    
    print("\nüé≠ TEST DEL SHOW COMPLETO CON RENTABILIDAD")
    print("=" * 45)
    
    try:
        from api.dynamic_pricing_show import DynamicPricingShow
        
        # Ejecutar show completo
        show = DynamicPricingShow()
        resultado = show.ejecutar_show_completo()
        
        # Verificar que incluya an√°lisis de rentabilidad
        productos = resultado.get('productos_generados', [])
        if productos and 'analisis_rentabilidad' in productos[0]:
            print("‚úÖ Show incluye an√°lisis de rentabilidad")
            
            # Mostrar m√©tricas de rentabilidad
            metricas = resultado.get('metricas_impacto', {})
            analisis_canales = metricas.get('analisis_por_canal', {})
            
            print(f"\nüìä RENTABILIDAD POR CANAL:")
            for canal, datos in analisis_canales.items():
                print(f"   {canal.capitalize()}: {datos.get('rentabilidad_promedio', 0):.1f}% ({datos.get('metodologia', 'N/A')})")
            
            rentabilidad_global = metricas.get('rentabilidad_global', {})
            if rentabilidad_global:
                print(f"\nüåü CLASIFICACI√ìN DE PRODUCTOS:")
                print(f"   Productos estrella: {rentabilidad_global.get('productos_estrella', 0)}")
                print(f"   Productos rentables: {rentabilidad_global.get('productos_rentables', 0)}")
                print(f"   Productos marginales: {rentabilidad_global.get('productos_marginales', 0)}")
                print(f"   Productos problem√°ticos: {rentabilidad_global.get('productos_problematicos', 0)}")
                
            resumen = metricas.get('resumen_general', {})
            print(f"\nüí∞ PROYECCI√ìN FINANCIERA:")
            print(f"   Revenue anual: ${resumen.get('revenue_anual_proyectado', 0):,}")
            print(f"   Beneficio proyectado: ${resumen.get('beneficio_anual_proyectado', 0):,}")
            print(f"   Rentabilidad promedio: {resumen.get('rentabilidad_promedio_sector', 0):.1f}%")
            
        else:
            print("‚ö†Ô∏è Show no incluye an√°lisis de rentabilidad")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en show completo: {e}")
        return False

def mostrar_metodologias():
    """Muestra las metodolog√≠as implementadas"""
    
    print("\nüìö METODOLOG√çAS IMPLEMENTADAS")
    print("=" * 35)
    
    metodologias = {
        "MAYORISTA": {
            "nombre": "Margen de Contribuci√≥n",
            "enfoque": "Contribuci√≥n a gastos fijos",
            "kpis": ["Margen bruto", "Rotaci√≥n inventario", "Contribuci√≥n fija"],
            "costos_especificos": ["Cr√©dito clientes", "Log√≠stica mayor", "Descuentos volumen"]
        },
        "MINORISTA": {
            "nombre": "Rentabilidad Integral",
            "enfoque": "An√°lisis completo de rentabilidad",
            "kpis": ["Margen neto", "Ticket promedio", "Frecuencia compra"],
            "costos_especificos": ["Atenci√≥n cliente", "Exhibici√≥n", "Garant√≠as"]
        },
        "DISTRIBUIDOR": {
            "nombre": "Eficiencia Territorial",
            "enfoque": "Eficiencia por zona geogr√°fica",
            "kpis": ["Margen zona", "Penetraci√≥n mercado", "Costo territorio"],
            "costos_especificos": ["Representantes", "Territorio", "Soporte t√©cnico"]
        }
    }
    
    for canal, info in metodologias.items():
        print(f"\nüîπ {canal}:")
        print(f"   Metodolog√≠a: {info['nombre']}")
        print(f"   Enfoque: {info['enfoque']}")
        print(f"   KPIs: {', '.join(info['kpis'])}")
        print(f"   Costos espec√≠ficos: {', '.join(info['costos_especificos'])}")

def main():
    """Funci√≥n principal de testing"""
    
    print("üß™" * 25)
    print("   TEST COMPLETO - AN√ÅLISIS DE RENTABILIDAD")
    print("üß™" * 25 + "\n")
    
    # Mostrar metodolog√≠as
    mostrar_metodologias()
    
    # Test 1: Rentabilidad espec√≠fica
    resultado1 = test_rentabilidad_sector()
    
    # Test 2: Show completo
    resultado2 = test_show_completo_con_rentabilidad()
    
    # Resumen
    print(f"\nüìã RESUMEN DE TESTS:")
    print(f"   An√°lisis de rentabilidad: {'‚úÖ OK' if resultado1 else '‚ùå FALLO'}")
    print(f"   Show completo: {'‚úÖ OK' if resultado2 else '‚ùå FALLO'}")
    
    if resultado1 and resultado2:
        print(f"\nüéâ TODOS LOS TESTS DE RENTABILIDAD PASARON")
        print(f"üéØ El sistema ahora analiza rentabilidad por metodolog√≠as del sector")
        print(f"üí° Caracter√≠sticas implementadas:")
        print(f"   üìä Separaci√≥n clara por canales (Mayorista/Minorista/Distribuidor)")
        print(f"   üéØ Metodolog√≠as espec√≠ficas del sector bater√≠as")
        print(f"   üí∞ C√°lculo de markup real y rentabilidad")
        print(f"   üìà Proyecciones financieras precisas")
        print(f"   üîç Evaluaci√≥n autom√°tica de productos")
    else:
        print(f"\n‚ùå HAY TESTS FALLIDOS - REVISAR IMPLEMENTACI√ìN")

if __name__ == "__main__":
    main()